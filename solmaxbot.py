from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7794847751:AAEaY5MTQIFvGCev6xn69iDEF22Fwx-Mp90"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø SolMaxBot, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ–∫–µ–Ω–æ–≤ üöÄ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze
async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        token_address = context.args[0] if context.args else None
        if not token_address:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /analyze <–∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞>")
            return

        # –ó–∞–ø—Ä–æ—Å –∫ API DexScreener
        url = f"https://api.dexscreener.io/latest/dex/tokens/{token_address}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            # –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
            pair = data['pairs'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
            message = (
                f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {pair['baseToken']['name']} ({pair['baseToken']['symbol']})\n"
                f"–¶–µ–Ω–∞: ${pair['priceUsd']}\n"
                f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): ${pair['volume']['h24']}\n"
                f"–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${pair['liquidity']['usd']}"
            )
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /balance
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: 0 SOL (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ).")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("analyze", analyze))
    application.add_handler(CommandHandler("balance", balance))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("Bot is running... Press Ctrl+C to stop.")
    application.run_polling()

if __name__ == "__main__":
    main()